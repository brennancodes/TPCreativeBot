


async function pingMtc(){
    const guild = client.guilds.cache.get(config.guildId);
    const channel = guild.channels.cache.get(config.channels.mtc);
    const pins = await channel.messages.fetchPinned(true);
    await guild.members.fetch();
    const mtcUsers = guild.roles.cache.get(config.roles.mtc).members.map(m=>m.user.id)
    console.log(mtcUsers);
    if (pins.size > 0){
        const userArray = [];
        const getLazyPeople = new Promise((resolve, reject)=>{
            // for each pinned message...
            pins.forEach(async x=>{
                // fetch the full message
                const m = await channel.messages.fetch(x)
                // for each cached partial reaction
                await m.react('🔄')                
                m.reactions.cache.forEach(async y=>{
                    // fetch the full reaction
                    y.fetch().then(async r=> {
                        if (r._emoji.name === '❌' || r._emoji.name === '✅'){
                            // fetch the users who clicked each reaction
                            const usrs = await r.users.fetch()
                            // map the user ids to a new array
                            usrs.map(z=>{
                                if (!z.bot){
                                    userArray.push(z.id);
                                    // TODO: put this in the original if statement so people don't get pinged about their own map submission
                                    if (m.content.includes(z.id)){
                                        //console.log("Submitter")
                                    }
                                }
                            });
                        }
                        resolve();
                    })
                });
            })
        })

        getLazyPeople.then(()=>{
            console.log(userArray);
            const naughtyPeople = [];
            mtcUsers.forEach(u=>{
                // If any member did not react and is not a bot, make them naughty
                if (u != config.users.bot && !userArray.includes(u)){
                    naughtyPeople.push(u);
                }
            })
            console.log(naughtyPeople);
            if (naughtyPeople.length > 0){
                var tagUsersString = "";
                naughtyPeople.forEach(n=>{
                    tagUsersString += `<@${n}>, `
                })
                tagUsersString += "there are unhandled actions that require your attention. Please review the pinned messages."
                channel.send({content:tagUsersString})
            }
        })
    }
    else{
        console.log("No pins")
    }
}

async function removeButtonsFromOriginal(interaction){
    var newContent = {                    
        components: []
    }

    var header = {
        'method' : 'PATCH',
        'Content-Type': 'application/json; charset=UTF-8'
    }

    try {
        var patchUrl = `/webhooks/${config.users.bot}/${interaction.token}/messages/${interaction.message.id}`
        await rest.patch(patchUrl, {headers: header, body:newContent})
    } catch (err) {
        console.log(err)
    }
}

client.on('interactionCreate', interaction => {
    if (interaction.isChatInputCommand()) {
        if (interaction.commandName === "submitmap"){
            var code = interaction.options.data[0].value;
            var baseUrl = "https://fortunatemaps.herokuapp.com/"
            var imageUrl = baseUrl + "preview/" + code + ".jpeg";
            var mapUrl = baseUrl + "map/" + code;
            var iconUrl = baseUrl + "/assets/logo.png"
            var title = "";
            var author = "";
            request(mapUrl, (error, response, html) => {
                if(!error && response.statusCode == 200){
                    const $ = cheerio.load(html);
                    title = $('.card-title').find('b').first().text() 
                    author = $('.card-title').find('b').last().text();
                }
                else {
                    console.log(error, response.statusCode);
                }
            }).then(function(){
                const embed = new EmbedBuilder()
                    .setColor('#7bcf5c')
                    .setThumbnail(imageUrl)
                    .setAuthor({name: "Confirm Map Submission", iconURL: iconUrl})
                    .setDescription('Title: **'+title+'**\n'
                                    + 'Map ID: **'+code+'**\n'
                                    + 'Author: [**' + author + '**](' + baseUrl + 'profile/' + author.split(" ").join("_") + ')\n\n'
                                    + '[**Test Map**](' + baseUrl + 'test/' + code + ')');
                const row = new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId('ConfirmMapSubmission').setStyle(ButtonStyle.Primary).setLabel('Confirm'),
                    new ButtonBuilder().setCustomId('CancelMapSubmission').setStyle(ButtonStyle.Secondary).setLabel('Cancel')
                )
                interaction.reply({ embeds:[embed], content:"*Verify that you've selected the correct map for submission.* \n*You can click the thumbnail to see a full-size image.*", ephemeral: true, components: [row] })
            })
        }
        if (interaction.commandName === "removemap"){
            const mapList = [];
            const fetchEm = new Promise((resolve,reject)=>{
                async function getMaps(){
                    const maps = await nfetch('https://tagpro.koalabeast.com/maps.json')
                    const body = await maps.json();
                    //console.log(body.rotation[0]);
                    body.rotation.sort(function(a,b){
                        return a.averageRating - b.averageRating;
                    })
                    body.rotation.forEach(x=>{
                        var tmp = {
                            name: x.name,
                            author: x.author,
                            score: x.averageRating,
                            key: x.key
                        }
                        mapList.push(tmp);
                    })
                    resolve();
                }
                getMaps();
            })
            fetchEm.then(()=>{
                const row = new ActionRowBuilder()
                    .addComponents(
                        new SelectMenuBuilder()
                            .setCustomId('removerotationmap')
                            .setPlaceholder('Select Map')
                            .addOptions([{
                                label:'Cancel',
                                description:'Nevermind!',
                                value:'Cancel'
                            }])                        
                    )
                addMaps(row)

                async function addMaps(row){
                    mapList.forEach(x=>{
                        row.components[0].addOptions([{
                            label: `${x.name} by ${x.author}`,
                            description: `Current Score: ${x.score}`,
                            value: `${x.key}`
                        }])
                    })
                }

                interaction.reply({content:"Nominate a map for removal",ephemeral:true,components:[row]})
            });


        }
    }
    if (interaction.isButton()){
        console.log(interaction.customId)
        if (interaction.customId === "ConfirmMapSubmission"){
            interaction.reply({content:"Got it! Map sent to MTC for review.", ephemeral:true})
            const mtcChannel = client.channels.cache.get(config.channels.mtc);
            let msg = interaction.message;
            msg.content = `**ATTENTION <@&${config.roles.mtc}>:** New submission received from <@${interaction.user.id}>. \nPlease react ✅ to approve or ❌ to reject.`
            msg.embeds[0].data.image = {url:msg.embeds[0].data.thumbnail.url};
            msg.embeds[0].data.author = {name:`Vote to add map to rotation on trial basis`,iconURL: msg.embeds[0].data.author.iconUrl}
            delete msg.embeds[0].data.thumbnail;
            msg.components = [];
            msg.allowedMentions = {"users":[],"roles":[]};
            mtcChannel.send(msg).then(sent => {
                sent.react("✅").then(()=>sent.react("❌")).then(()=>sent.react("🔬")).then(()=>sent.pin())
            })
            // This is needed to remove the components (buttons)            
            removeButtonsFromOriginal(interaction);
        }
        else if (interaction.customId === "MarkAsAdded"){
            interaction.message.unpin();
            interaction.reply({content:`Content has been added to the game by <@${interaction.user.id}>`, allowedMentions:{"users":[]}})
            removeButtonsFromOriginal(interaction)
        }
        else if (interaction.customId === "CancelMapSubmission"){
            interaction.reply({content:"Submission has been cancelled. Nothing sent to MTC.", ephemeral:true})
            // This is needed to remove the components (buttons)            
            removeButtonsFromOriginal(interaction);
        }
        else {
            interaction.reply({content:`Command not recognized. Please contact <@${config.users.botOwner}> for bot maintenance.`})
        }
        
    }
    if (interaction.isSelectMenu()){
        console.log(interaction.message.components[0].components)
        if (interaction.customId === "removerotationmap"){
            if (interaction.values[0] === "Cancel"){
                interaction.reply({content:"Action cancelled. Knew you wouldn't, pussy.",ephemeral:true})
                removeButtonsFromOriginal(interaction);
            }
            else {
                const imgUrl = `https://static.koalabeast.com/images/maps/${interaction.values[0].replaceAll("_","%20").replaceAll(" ","%20")}-small.png`
                console.log(imgUrl)
                const embed = new EmbedBuilder()
                    .setImage(imgUrl)
                interaction.reply({content:`**ATTENTION <@&${config.roles.mtc}>:** New removal nomination received from <@${interaction.user.id}>. \nPlease react ✅ to remove or ❌ to keep.`,embeds:[embed]})
                removeButtonsFromOriginal(interaction);
            }
        }
    }
})

client.on('messageReactionAdd', async(reaction, user)=>{
    if(reaction.message.channelId === config.channels.mtc){
        if (reaction.partial){
            try{
                await reaction.fetch();
            } catch (error){
                console.error(error);
                return;
            }
        }
        if (config.mtcSettings.blockSelfVoting){
            if (reaction.message.content.includes(user.id)){
                await reaction.users.remove(user.id)
                reaction.message.channel.send({content:`You know better than to vote on your own map, <@${user.id}>.`,allowedMentions:{"users":[]}})
            }
        }
        
        let decision;
        let wired;
        const isWired = new Promise((resolve,reject)=>{
            async function wireFunc(){
                var wire = reaction.message.reactions.cache.get('🔬');
                if (wire != null){
                    var u = await wire.users.fetch()
                    wired = u.size >= config.mtcSettings.qualityControlThreshold;
                    resolve();
                }
                else {
                    wired = false;
                    resolve();
                }
            }
            wireFunc();
        })
        
        function getDecision(){
            if (reaction._emoji.name === '🔄'){
                decision = "Refresh"
                return;
            }
            if (reaction.count >= config.mtcSettings.approveDenyThreshold){ 
                if (reaction._emoji.name === '✅'){
                    if (!wired){
                        decision = "Pending Manual Test"
                    }
                    else {
                        decision = "Approved";
                    }
                }
                else if (reaction._emoji.name === '❌'){
                    decision = "Denied"
                }                
                else {
                    decision = "Stop Clicking Weird Shit"
                }
            }
            else {
                decision = "No Decision";
            }
        }

        isWired.then(()=>{
            getDecision();
            Respond();
        })

        async function Respond(){
            const description = reaction.message.embeds[0].data.description;
            const descSplit = description.split('**');
            const rootUrl = 'https://fortunatemaps.herokuapp.com/'
            const mapByAuthorLinks = `[**${descSplit[1]}**](${rootUrl}map/${descSplit[3]}) by [**${descSplit[5]}**](${rootUrl}profile/${descSplit[5].replace(" ","_")})`
            const mapByAuthor = `${descSplit[3]}: *${descSplit[1]}* by ${descSplit[5]}`
            const iconUrl = 'https://cdn.discordapp.com/icons/368194770553667584/9bbd5590bfdaebdeb34af78e9261f0fe.webp?size=96'
            //console.log(getDecision(), reaction.count);
            if (decision === "Refresh"){
                await reaction.users.remove(user.id);
                return;
            }
            if (decision === 'Pending Manual Test'){
                await reaction.users.remove(user.id)
                const embed = new EmbedBuilder().setColor('#FFB800').setAuthor({name:"Pending manual test confirmation",iconURL:iconUrl})
                .setDescription(`${mapByAuthorLinks}\n\nPlease click the message this is replying to and perform a manual test of the map to ensure everything is wired properly 
                    and nothing is broken.\n\nIf everything looks good, click the 🔬 reaction then re-cast your ✅ reaction so this map may advance.`)
                .setThumbnail(`${rootUrl}preview/${descSplit[3]}.jpeg`)
                reaction.message.reply({content:`**NO QUALITY CONTROL INDICATED** \n${mapByAuthor}`,embeds:[embed]})
                return;
            }
            if (decision === 'Approved' || decision === 'Denied'){
                const header = `${decision} for trial rotation`
                reaction.message.unpin();                
                
                var appr = reaction.message.reactions.cache.get('✅');
                var deny = reaction.message.reactions.cache.get('❌');
                var wire = reaction.message.reactions.cache.get('🔬');
                var approvalList = []; var denialList = []; var wireList = [];
                var approvalString = ""; var denialString = ""; var wireString = "";
                await appr.users.fetch().then(function(users){
                    approvalList = Array.from(users.keys());
                    approvalString = "Yes votes: ";
                    approvalList.forEach(x=> {if (x != config.users.bot){approvalString += "<@" + x + "> "}});
                })
                await deny.users.fetch().then(function(users){
                    denialList = Array.from(users.keys());
                    denialString = "No votes: ";
                    denialList.forEach(x=> {if (x != config.users.bot){denialString += "<@" + x + "> "}});                
                })
                await wire.users.fetch().then(function(users){
                    wireList = Array.from(users.keys());
                    wireString = "Quality control by: ";
                    wireList.forEach(x=> {if (x != config.users.bot){wireString += "<@" + x + "> "}});
                })
                const embed = new EmbedBuilder().setColor(decision === 'Approved' ? '#7bcf5c' : '#da3e52')
                    .setAuthor({name:header,iconURL:iconUrl})
                    .setDescription(`${mapByAuthorLinks}\n\nID: **${descSplit[3]}**\n\n${approvalString}\n${denialString}${decision == "Denied" ? '' : '\n' + wireString}`)
                    .setThumbnail(`${rootUrl}preview/${descSplit[3]}.jpeg`)
                const row = new ActionRowBuilder();
                if (decision === "Approved"){
                    row.addComponents(
                        new ButtonBuilder().setCustomId('MarkAsAdded').setStyle(ButtonStyle.Primary).setLabel('Mark as Added'),
                    )
                }
                reaction.message.reactions.removeAll();
    
                reaction.message.channel.send({embeds:[embed],content:`**${decision.toLocaleUpperCase()} FOR ROTATION** \n${mapByAuthor}`,allowedMentions: {"users":[]},components:decision==="Approved"?[row]:[]})
                    .then(sent=>{
                        if (decision === "Approved"){
                            sent.pin();
                        }
                    })
                
            }
        }
    }
})